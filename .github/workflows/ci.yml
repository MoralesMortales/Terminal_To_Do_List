name: Cross-Platform CI

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            compiler: g++
            compiler_name: "GCC"
            build_dir: "build_gcc"
          
          - os: macos-latest
            compiler: clang++
            compiler_name: "Clang"
            build_dir: "build_clang"
          
          - os: windows-latest
            compiler: cl
            compiler_name: "MSVC"
            build_dir: "build_msvc"

    steps:

    - uses: actions/checkout@v4
    - name: Install dependencies (${{ matrix.compiler_name }})
      shell: bash  
      run: |
        case "${{ matrix.os }}" in
          ubuntu-latest)
            sudo apt-get update
            sudo apt-get install -y build-essential cmake
            ;;
          macos-latest)
            brew update
            brew install cmake
            ;;
        esac

    - name: Setup MSVC (Windows only)
      if: matrix.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Configure CMake (${{ matrix.compiler_name }})
      shell: bash
      run: |
        mkdir -p ${{ matrix.build_dir }}
        cd ${{ matrix.build_dir }}
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cmake .. -G "Ninja" -DCMAKE_C_COMPILER=cl -DCMAKE_CXX_COMPILER=cl
        else
          cmake .. -DCMAKE_C_COMPILER=${{ matrix.compiler }} -DCMAKE_CXX_COMPILER=${{ matrix.compiler }}
        fi

    - name: Build project (${{ matrix.compiler_name }})
      shell: bash
      run: |
        cd ${{ matrix.build_dir }}
        cmake --build . --config Release

    - name: Run Program (${{ matrix.compiler_name }})
      shell: bash
      run: |
        cd ${{ matrix.build_dir }}
        if [ "${{ matrix.os }}" != "windows-latest" ]; then
          echo 2 | ./ToDoApp
        else
          echo 2 | ./ToDoApp.exe
        fi

    - name: Run tests (${{ matrix.compiler_name }})
      shell: bash
      run: |
        cd ${{ matrix.build_dir }}
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          ctest -C Release --output-on-failure
        else
          ctest --output-on-failure
        fi
